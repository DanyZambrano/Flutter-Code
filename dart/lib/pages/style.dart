import 'package:flutter/material.dart';

class StylePage extends StatelessWidget {
  const StylePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.primaryContainer,
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Dart Style Guide',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 16),
            Text(
              'El estilo de c√≥digo en Dart es fundamental para mantener c√≥digo legible, consistente y mantenible. Dart tiene convenciones espec√≠ficas que deben seguirse para escribir c√≥digo profesional.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 32),
            
            Text(
              '¬øQu√© es el Estilo de C√≥digo?',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'El estilo de c√≥digo es:\n'
              '‚Ä¢ Un conjunto de convenciones para escribir c√≥digo\n'
              '‚Ä¢ Fundamental para la legibilidad y mantenibilidad\n'
              '‚Ä¢ Esencial para el trabajo en equipo\n'
              '‚Ä¢ Ayuda a prevenir errores comunes\n'
              '‚Ä¢ Mejora la calidad del c√≥digo',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° Concepto Clave',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.blue.shade900,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Dart tiene un estilo oficial definido por Google que promueve c√≥digo limpio, legible y consistente en toda la comunidad.',
                    style: TextStyle(color: Colors.blue.shade900),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '1. Convenciones de Nomenclatura',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Reglas fundamentales para nombrar variables, funciones y clases:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Variables y funciones en camelCase
String nombreUsuario = 'Juan';
int edadMaxima = 25;
bool esValido = true;

void calcularPromedio() {
  // Funci√≥n en camelCase
}

// ‚úÖ BUENO - Clases en PascalCase
class UsuarioModelo {
  final String nombre;
  final int edad;
  
  UsuarioModelo(this.nombre, this.edad);
}

// ‚úÖ BUENO - Constantes en SCREAMING_SNAKE_CASE
const String API_BASE_URL = 'https://api.ejemplo.com';
const int MAX_INTENTOS = 3;

// ‚úÖ BUENO - Archivos en snake_case
// usuario_modelo.dart
// servicio_api.dart
// utilidades_validacion.dart

// ‚ùå MALO - Nombres confusos o inconsistentes
String NombreUsuario = 'Juan';  // PascalCase para variable
int edad_maxima = 25;           // snake_case para variable
bool ESVALIDO = true;           // SCREAMING para variable local

void CalcularPromedio() {       // PascalCase para funci√≥n
  // ...
}

// ‚ùå MALO - Nombres poco descriptivos
String n = 'Juan';             // Muy corto
int x = 25;                    // No descriptivo
bool b = true;                 // Abreviaci√≥n confusa''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '2. Formato y Espaciado',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Reglas de formato para mantener c√≥digo limpio y legible:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Espaciado consistente
class Calculadora {
  // Dos espacios de indentaci√≥n
  int sumar(int a, int b) {
    return a + b;
  }
  
  // L√≠nea en blanco entre m√©todos
  int restar(int a, int b) {
    return a - b;
  }
}

// ‚úÖ BUENO - Espaciado en operadores
int resultado = numero1 + numero2;
bool esValido = (edad >= 18) && (nombre.isNotEmpty);

// ‚úÖ BUENO - Espaciado en listas
List<String> colores = [
  'rojo',
  'verde',
  'azul',
];

// ‚úÖ BUENO - Espaciado en par√°metros
void mostrarMensaje(
  String titulo,
  String mensaje, {
  bool esImportante = false,
}) {
  print('\$titulo: \$mensaje');
}

// ‚ùå MALO - Espaciado inconsistente
class Calculadora{
int sumar(int a,int b){
return a+b;
}
int restar(int a, int b){
return a-b;
}
}

// ‚ùå MALO - Sin espaciado en operadores
int resultado=numero1+numero2;
bool esValido=(edad>=18)&&(nombre.isNotEmpty);

// ‚ùå MALO - Listas mal formateadas
List<String> colores = ['rojo','verde','azul'];

// ‚ùå MALO - Par√°metros mal formateados
void mostrarMensaje(String titulo,String mensaje,{bool esImportante=false}){
  print('\$titulo: \$mensaje');
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '3. Comentarios y Documentaci√≥n',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'C√≥mo escribir comentarios efectivos y documentaci√≥n clara:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Comentarios de documentaci√≥n
/// Calcula el √°rea de un c√≠rculo dado su radio.
/// 
/// [radio] debe ser un n√∫mero positivo.
/// Retorna el √°rea calculada en unidades cuadradas.
/// 
/// Ejemplo:
/// ```dart
/// double area = calcularAreaCirculo(5.0);
/// print(area); // 78.54
/// ```
double calcularAreaCirculo(double radio) {
  if (radio <= 0) {
    throw ArgumentError('El radio debe ser positivo');
  }
  return 3.14159 * radio * radio;
}

// ‚úÖ BUENO - Comentarios explicativos
class ProcesadorArchivos {
  // Cache para evitar reprocesar archivos ya le√≠dos
  final Map<String, String> _cache = {};
  
  String procesarArchivo(String ruta) {
    // Verificar si ya est√° en cache
    if (_cache.containsKey(ruta)) {
      return _cache[ruta]!;
    }
    
    // Procesar archivo y guardar en cache
    String contenido = _leerArchivo(ruta);
    _cache[ruta] = contenido;
    return contenido;
  }
  
  String _leerArchivo(String ruta) {
    // TODO: Implementar lectura de archivo
    return '';
  }
}

// ‚ùå MALO - Comentarios obvios o innecesarios
// Incrementar contador
contador++;

// Asignar valor
String nombre = 'Juan';

// ‚ùå MALO - Comentarios desactualizados
// Esta funci√≥n suma dos n√∫meros
int multiplicar(int a, int b) {
  return a * b; // Comentario incorrecto
}

// ‚ùå MALO - Sin documentaci√≥n
double calc(double r) {
  return 3.14159 * r * r;
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '4. Estructura de Clases y M√©todos',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Organizaci√≥n y estructura de clases siguiendo las convenciones:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Estructura de clase ordenada
class Usuario {
  // 1. Variables de instancia
  final String nombre;
  final String email;
  final int edad;
  
  // 2. Variables est√°ticas
  static const int edadMinima = 13;
  static final List<String> dominiosValidos = ['gmail.com', 'yahoo.com'];
  
  // 3. Constructor
  Usuario({
    required this.nombre,
    required this.email,
    required this.edad,
  }) : assert(edad >= edadMinima, 'La edad debe ser mayor a \$edadMinima');
  
  // 4. Getters
  bool get esMayorDeEdad => edad >= 18;
  String get iniciales => nombre.split(' ').map((e) => e[0]).join();
  
  // 5. M√©todos de instancia
  void actualizarEmail(String nuevoEmail) {
    if (!_esEmailValido(nuevoEmail)) {
      throw ArgumentError('Email inv√°lido');
    }
    // Actualizar email
  }
  
  // 6. M√©todos privados
  bool _esEmailValido(String email) {
    return email.contains('@') && dominiosValidos.any((d) => email.endsWith(d));
  }
  
  // 7. M√©todos est√°ticos
  static Usuario crearAdmin() {
    return Usuario(
      nombre: 'Administrador',
      email: 'admin@sistema.com',
      edad: 25,
    );
  }
  
  // 8. Override de toString
  @override
  String toString() => 'Usuario(nombre: \$nombre, email: \$email, edad: \$edad)';
}

// ‚ùå MALO - Estructura desordenada
class Usuario {
  static Usuario crearAdmin() { return Usuario('Admin', 'admin@test.com', 25); }
  final String nombre;
  void actualizarEmail(String nuevoEmail) { /* ... */ }
  final String email;
  bool _esEmailValido(String email) { return true; }
  final int edad;
  Usuario(this.nombre, this.email, this.edad);
  bool get esMayorDeEdad => edad >= 18;
  static const int edadMinima = 13;
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '5. Manejo de Errores y Excepciones',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Convenciones para manejo de errores y excepciones:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Manejo de errores expl√≠cito
class ServicioArchivos {
  Future<String> leerArchivo(String ruta) async {
    try {
      final archivo = File(ruta);
      if (!await archivo.exists()) {
        throw FileSystemException('Archivo no encontrado', ruta);
      }
      return await archivo.readAsString();
    } on FileSystemException catch (e) {
      // Log del error espec√≠fico
      print('Error de sistema de archivos: \$e');
      rethrow;
    } catch (e) {
      // Error inesperado
      print('Error inesperado: \$e');
      throw Exception('No se pudo leer el archivo');
    }
  }
  
  // ‚úÖ BUENO - Validaci√≥n de par√°metros
  void validarParametros(String? nombre, int? edad) {
    if (nombre == null || nombre.isEmpty) {
      throw ArgumentError('El nombre no puede estar vac√≠o');
    }
    if (edad == null || edad < 0) {
      throw ArgumentError('La edad debe ser un n√∫mero positivo');
    }
  }
  
  // ‚úÖ BUENO - Resultado opcional para errores esperados
  String? buscarUsuario(String id) {
    try {
      return _baseDatos.buscar(id);
    } catch (e) {
      // Error esperado, retornar null
      return null;
    }
  }
}

// ‚ùå MALO - Ignorar errores
Future<String> leerArchivo(String ruta) async {
  final archivo = File(ruta);
  return await archivo.readAsString(); // Puede lanzar excepci√≥n
}

// ‚ùå MALO - Catch gen√©rico sin manejo
Future<String> leerArchivo(String ruta) async {
  try {
    final archivo = File(ruta);
    return await archivo.readAsString();
  } catch (e) {
    // No hacer nada con el error
    return '';
  }
}

// ‚ùå MALO - No validar par√°metros
void procesarUsuario(String? nombre, int? edad) {
  // Usar directamente sin validar
  print('Usuario: \$nombre, Edad: \$edad');
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '6. Uso de Null Safety',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Convenciones para el uso correcto de null safety:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// ‚úÖ BUENO - Null safety expl√≠cito
class Usuario {
  final String nombre;
  final String? telefono; // Opcional
  final int edad;
  
  Usuario({
    required this.nombre,
    this.telefono, // Opcional
    required this.edad,
  });
  
  // ‚úÖ BUENO - Manejo seguro de nulls
  String obtenerTelefono() {
    return telefono ?? 'No disponible';
  }
  
  // ‚úÖ BUENO - Validaci√≥n de null
  bool tieneTelefono() {
    return telefono != null && telefono!.isNotEmpty;
  }
  
  // ‚úÖ BUENO - Uso de late para inicializaci√≥n diferida
  late String _token;
  
  void inicializarToken(String token) {
    _token = token;
  }
  
  // ‚úÖ BUENO - Uso de required para par√°metros obligatorios
  void actualizarPerfil({
    required String nombre,
    String? telefono,
    required int edad,
  }) {
    // Actualizar perfil
  }
}

// ‚ùå MALO - Uso incorrecto de null safety
class Usuario {
  String nombre; // Deber√≠a ser final
  String telefono; // Deber√≠a ser String?
  int edad;
  
  Usuario(this.nombre, this.telefono, this.edad);
  
  // ‚ùå MALO - No manejar nulls
  String obtenerTelefono() {
    return telefono; // Puede ser null
  }
  
  // ‚ùå MALO - Uso innecesario de !
  String obtenerNombre() {
    return nombre!; // nombre no es nullable
  }
}

// ‚úÖ BUENO - Uso de operadores null-aware
void procesarUsuario(Usuario? usuario) {
  // Usar ?. para acceso seguro
  usuario?.actualizarPerfil(
    nombre: 'Nuevo nombre',
    edad: 25,
  );
  
  // Usar ?? para valores por defecto
  String nombre = usuario?.nombre ?? 'Usuario an√≥nimo';
  
  // Usar ??= para asignaci√≥n condicional
  usuario ??= Usuario.crearDefault();
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '7. Herramientas de Formato',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Herramientas autom√°ticas para mantener el estilo de c√≥digo:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''# dart format - Formatear c√≥digo autom√°ticamente
dart format lib/

# Formatear archivo espec√≠fico
dart format lib/pages/usuario.dart

# Verificar formato sin cambiar archivos
dart format --set-exit-if-changed lib/

# dart analyze - An√°lisis est√°tico de c√≥digo
dart analyze

# An√°lisis con informaci√≥n detallada
dart analyze --verbose

# dart fix - Aplicar correcciones autom√°ticas
dart fix

# Aplicar correcciones espec√≠ficas
dart fix --apply

# flutter analyze - Para proyectos Flutter
flutter analyze

# flutter format - Formatear c√≥digo Flutter
flutter format lib/

# Configuraci√≥n en analysis_options.yaml
analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

linter:
  rules:
    # Reglas de estilo
    - prefer_single_quotes
    - prefer_const_constructors
    - prefer_const_literals_to_create_immutables
    
    # Reglas de nomenclatura
    - non_constant_identifier_names
    - camel_case_types
    - camel_case_extensions
    
    # Reglas de documentaci√≥n
    - public_member_api_docs
    - package_api_docs
    
    # Reglas de null safety
    - avoid_null_checks_in_equality_operators
    - prefer_null_aware_operators

# Configuraci√≥n en .vscode/settings.json
{
  "dart.lineLength": 80,
  "dart.insertArgumentPlaceholders": false,
  "dart.previewFlutterUiGuides": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  }
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '8. Mejores Pr√°cticas',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‚úÖ Buenas Pr√°cticas:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.green.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Usa nombres descriptivos y significativos\n'
                    '‚Ä¢ Mant√©n funciones y m√©todos peque√±os y enfocados\n'
                    '‚Ä¢ Documenta c√≥digo complejo o no obvio\n'
                    '‚Ä¢ Usa null safety de manera expl√≠cita\n'
                    '‚Ä¢ Maneja errores de forma apropiada\n'
                    '‚Ä¢ Sigue las convenciones de nomenclatura\n'
                    '‚Ä¢ Usa herramientas de formato autom√°tico\n'
                    '‚Ä¢ Escribe tests para tu c√≥digo',
                    style: TextStyle(
                      color: Colors.green.shade900,
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‚ùå Evita:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.red.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Nombres de una sola letra o abreviaciones\n'
                    '‚Ä¢ Funciones muy largas o complejas\n'
                    '‚Ä¢ Comentarios obvios o desactualizados\n'
                    '‚Ä¢ Ignorar errores o excepciones\n'
                    '‚Ä¢ Mezclar estilos de nomenclatura\n'
                    '‚Ä¢ C√≥digo sin formato consistente\n'
                    '‚Ä¢ Variables globales innecesarias\n'
                    '‚Ä¢ C√≥digo duplicado',
                    style: TextStyle(
                      color: Colors.red.shade900,
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '9. Ejemplo Completo - C√≥digo Bien Estilizado',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Un ejemplo completo de c√≥digo siguiendo todas las convenciones:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''/// Servicio para gestionar usuarios del sistema.
/// 
/// Proporciona funcionalidades para crear, actualizar y eliminar
/// usuarios, as√≠ como validar sus datos.
class ServicioUsuarios {
  // Constantes
  static const int edadMinima = 13;
  static const int edadMaxima = 120;
  static const int longitudMinimaNombre = 2;
  static const int longitudMaximaNombre = 50;
  
  // Variables de instancia
  final Map<String, Usuario> _usuarios = {};
  final List<String> _dominiosValidos = [
    'gmail.com',
    'yahoo.com',
    'hotmail.com',
  ];
  
  /// Crea un nuevo usuario con los datos proporcionados.
  /// 
  /// [nombre] debe tener entre [longitudMinimaNombre] y [longitudMaximaNombre] caracteres.
  /// [email] debe ser un email v√°lido con un dominio permitido.
  /// [edad] debe estar entre [edadMinima] y [edadMaxima].
  /// 
  /// Lanza [ArgumentError] si alg√∫n par√°metro es inv√°lido.
  /// 
  /// Ejemplo:
  /// ```dart
  /// final servicio = ServicioUsuarios();
  /// final usuario = servicio.crearUsuario(
  ///   nombre: 'Juan P√©rez',
  ///   email: 'juan@email.com',
  ///   edad: 25,
  /// );
  /// ```
  Usuario crearUsuario({
    required String nombre,
    required String email,
    required int edad,
  }) {
    _validarNombre(nombre);
    _validarEmail(email);
    _validarEdad(edad);
    
    final usuario = Usuario(
      id: _generarId(),
      nombre: nombre.trim(),
      email: email.toLowerCase().trim(),
      edad: edad,
      fechaCreacion: DateTime.now(),
    );
    
    _usuarios[usuario.id] = usuario;
    return usuario;
  }
  
  /// Obtiene un usuario por su ID.
  /// 
  /// Retorna [null] si no se encuentra el usuario.
  Usuario? obtenerUsuario(String id) {
    return _usuarios[id];
  }
  
  /// Actualiza los datos de un usuario existente.
  /// 
  /// Lanza [ArgumentError] si el usuario no existe o los datos son inv√°lidos.
  void actualizarUsuario({
    required String id,
    String? nombre,
    String? email,
    int? edad,
  }) {
    final usuario = _usuarios[id];
    if (usuario == null) {
      throw ArgumentError('Usuario con ID \$id no encontrado');
    }
    
    if (nombre != null) _validarNombre(nombre);
    if (email != null) _validarEmail(email);
    if (edad != null) _validarEdad(edad);
    
    final usuarioActualizado = usuario.copyWith(
      nombre: nombre?.trim() ?? usuario.nombre,
      email: email?.toLowerCase().trim() ?? usuario.email,
      edad: edad ?? usuario.edad,
    );
    
    _usuarios[id] = usuarioActualizado;
  }
  
  /// Elimina un usuario del sistema.
  /// 
  /// Retorna [true] si el usuario fue eliminado, [false] si no exist√≠a.
  bool eliminarUsuario(String id) {
    return _usuarios.remove(id) != null;
  }
  
  /// Obtiene todos los usuarios del sistema.
  List<Usuario> obtenerTodosLosUsuarios() {
    return _usuarios.values.toList();
  }
  
  /// Valida que el nombre cumpla con los requisitos.
  void _validarNombre(String nombre) {
    final nombreTrimmed = nombre.trim();
    
    if (nombreTrimmed.isEmpty) {
      throw ArgumentError('El nombre no puede estar vac√≠o');
    }
    
    if (nombreTrimmed.length < longitudMinimaNombre) {
      throw ArgumentError(
        'El nombre debe tener al menos \$longitudMinimaNombre caracteres',
      );
    }
    
    if (nombreTrimmed.length > longitudMaximaNombre) {
      throw ArgumentError(
        'El nombre no puede tener m√°s de \$longitudMaximaNombre caracteres',
      );
    }
  }
  
  /// Valida que el email sea v√°lido y tenga un dominio permitido.
  void _validarEmail(String email) {
    final emailTrimmed = email.trim().toLowerCase();
    
    if (emailTrimmed.isEmpty) {
      throw ArgumentError('El email no puede estar vac√≠o');
    }
    
    if (!emailTrimmed.contains('@')) {
      throw ArgumentError('El email debe contener @');
    }
    
    final partes = emailTrimmed.split('@');
    if (partes.length != 2) {
      throw ArgumentError('Formato de email inv√°lido');
    }
    
    final dominio = partes[1];
    if (!_dominiosValidos.contains(dominio)) {
      throw ArgumentError(
        'Dominio no permitido. Dominios v√°lidos: \${_dominiosValidos.join(", ")}',
      );
    }
  }
  
  /// Valida que la edad est√© dentro del rango permitido.
  void _validarEdad(int edad) {
    if (edad < edadMinima) {
      throw ArgumentError('La edad debe ser al menos \$edadMinima');
    }
    
    if (edad > edadMaxima) {
      throw ArgumentError('La edad no puede ser mayor a \$edadMaxima');
    }
  }
  
  /// Genera un ID √∫nico para un nuevo usuario.
  String _generarId() {
    return 'user_\${DateTime.now().millisecondsSinceEpoch}';
  }
}

/// Modelo de datos para representar un usuario.
class Usuario {
  final String id;
  final String nombre;
  final String email;
  final int edad;
  final DateTime fechaCreacion;
  
  const Usuario({
    required this.id,
    required this.nombre,
    required this.email,
    required this.edad,
    required this.fechaCreacion,
  });
  
  /// Crea una copia del usuario con los campos especificados actualizados.
  Usuario copyWith({
    String? id,
    String? nombre,
    String? email,
    int? edad,
    DateTime? fechaCreacion,
  }) {
    return Usuario(
      id: id ?? this.id,
      nombre: nombre ?? this.nombre,
      email: email ?? this.email,
      edad: edad ?? this.edad,
      fechaCreacion: fechaCreacion ?? this.fechaCreacion,
    );
  }
  
  @override
  String toString() {
    return 'Usuario(id: \$id, nombre: \$nombre, email: \$email, edad: \$edad)';
  }
  
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    
    return other is Usuario &&
        other.id == id &&
        other.nombre == nombre &&
        other.email == email &&
        other.edad == edad;
  }
  
  @override
  int get hashCode {
    return Object.hash(id, nombre, email, edad);
  }
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '10. Resumen',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.purple.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.purple.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üìã Puntos Clave:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.purple.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    '1Ô∏è‚É£ Usa nomenclatura consistente (camelCase, PascalCase)\n\n'
                    '2Ô∏è‚É£ Mant√©n formato y espaciado uniforme\n\n'
                    '3Ô∏è‚É£ Documenta c√≥digo complejo con comentarios claros\n\n'
                    '4Ô∏è‚É£ Organiza clases siguiendo un orden l√≥gico\n\n'
                    '5Ô∏è‚É£ Maneja errores de forma expl√≠cita y apropiada\n\n'
                    '6Ô∏è‚É£ Usa null safety de manera consciente\n\n'
                    '7Ô∏è‚É£ Aprovecha herramientas de formato autom√°tico\n\n'
                    '8Ô∏è‚É£ El estilo de c√≥digo es fundamental para la calidad',
                    style: TextStyle(
                      color: Colors.purple.shade900,
                      height: 1.8,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }
}
