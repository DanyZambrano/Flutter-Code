import 'package:flutter/material.dart';

class MetodosPage extends StatelessWidget {
  const MetodosPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.primaryContainer,
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'M√©todos en Dart',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 16),
            Text(
              'Los m√©todos son funciones que pertenecen a una clase. Son el comportamiento de los objetos y permiten que los datos encapsulados en una clase puedan ser manipulados de manera controlada.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 32),
            
            Text(
              '¬øQu√© es un M√©todo?',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Un m√©todo es:\n'
              '‚Ä¢ Una funci√≥n que pertenece a una clase u objeto\n'
              '‚Ä¢ El comportamiento de un objeto\n'
              '‚Ä¢ Puede acceder a las propiedades de la clase\n'
              '‚Ä¢ Define las acciones que puede realizar un objeto\n'
              '‚Ä¢ Se invoca usando la notaci√≥n de punto (objeto.metodo())',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° Concepto Clave',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.blue.shade900,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Un m√©todo es una funci√≥n asociada a una clase. La principal diferencia es que los m√©todos tienen acceso al estado interno del objeto (sus propiedades) mediante "this".',
                    style: TextStyle(color: Colors.blue.shade900),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),
            Text(
              'Diferencia: Funci√≥n vs M√©todo',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.amber.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.amber.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üîç Funci√≥n vs M√©todo:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.amber.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    'üìå FUNCI√ìN:\n'
                    '‚Ä¢ Independiente, no pertenece a ninguna clase\n'
                    '‚Ä¢ Se declara fuera de cualquier clase\n'
                    '‚Ä¢ No tiene acceso a propiedades de instancia\n'
                    '‚Ä¢ Se llama directamente por su nombre\n'
                    '‚Ä¢ Ejemplo: int sumar(int a, int b) { return a + b; }\n\n'
                    'üéØ M√âTODO:\n'
                    '‚Ä¢ Pertenece a una clase u objeto\n'
                    '‚Ä¢ Se declara dentro de una clase\n'
                    '‚Ä¢ Tiene acceso a propiedades de la clase (this)\n'
                    '‚Ä¢ Se llama usando objeto.metodo()\n'
                    '‚Ä¢ Ejemplo: class Calc { int sumar(int a, int b) {...} }',
                    style: TextStyle(
                      color: Colors.amber.shade900,
                      height: 1.8,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '1. Sintaxis B√°sica de M√©todos',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// Definici√≥n de una clase con m√©todos
class Persona {
  // Propiedades
  String nombre;
  int edad;
  
  // Constructor
  Persona(this.nombre, this.edad);
  
  // M√âTODO: presenta a la persona
  void presentarse() {
    print('Hola, soy \$nombre y tengo \$edad a√±os');
  }
  
  // M√âTODO: con par√°metros
  void cumplirAnios(int cantidad) {
    edad += cantidad;
    print('\$nombre ahora tiene \$edad a√±os');
  }
  
  // M√âTODO: que retorna un valor
  bool esMayorDeEdad() {
    return edad >= 18;
  }
  
  // M√âTODO: con expresi√≥n de flecha
  String obtenerInfo() => 'Nombre: \$nombre, Edad: \$edad';
}

void main() {
  // Crear instancia
  var persona = Persona('Ana', 25);
  
  // Llamar m√©todos
  persona.presentarse();           // Hola, soy Ana y tengo 25 a√±os
  persona.cumplirAnios(1);        // Ana ahora tiene 26 a√±os
  
  if (persona.esMayorDeEdad()) {
    print('Es mayor de edad');
  }
  
  print(persona.obtenerInfo());   // Nombre: Ana, Edad: 26
}

// COMPARACI√ìN CON FUNCIONES
// Funci√≥n independiente (NO es un m√©todo)
void presentarPersona(String nombre, int edad) {
  print('Hola, soy \$nombre y tengo \$edad a√±os');
}

// Uso de funci√≥n
void ejemploFuncion() {
  presentarPersona('Carlos', 30);
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '2. Tipos de M√©todos',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''class Calculadora {
  // Propiedad de instancia
  String modelo = 'Casio FX-570';
  
  // 1. M√âTODO DE INSTANCIA (m√°s com√∫n)
  int sumar(int a, int b) {
    print('Usando calculadora: \$modelo');
    return a + b;
  }
  
  // 2. M√âTODO EST√ÅTICO (sin acceso a propiedades de instancia)
  static int multiplicar(int a, int b) {
    // No puede usar 'this' ni 'modelo'
    return a * b;
  }
  
  // 3. GETTER (m√©todo que parece una propiedad)
  String get descripcion {
    return 'Calculadora modelo \$modelo';
  }
  
  // 4. SETTER (m√©todo para asignar valor)
  set nuevoModelo(String valor) {
    modelo = valor;
    print('Modelo actualizado a: \$modelo');
  }
  
  // 5. M√âTODO PRIVADO (comienza con _)
  int _operacionInterna(int x) {
    return x * 2;
  }
  
  // M√©todo p√∫blico que usa el privado
  int duplicar(int numero) {
    return _operacionInterna(numero);
  }
}

void main() {
  // M√©todo de instancia
  var calc = Calculadora();
  print(calc.sumar(5, 3));              // 8
  
  // M√©todo est√°tico (se llama con el nombre de la clase)
  print(Calculadora.multiplicar(4, 5)); // 20
  
  // Getter (se usa como propiedad)
  print(calc.descripcion);              // Calculadora modelo Casio FX-570
  
  // Setter (se usa como asignaci√≥n)
  calc.nuevoModelo = 'HP 12C';
  
  // M√©todo p√∫blico
  print(calc.duplicar(10));             // 20
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '3. Ejemplo B√°sico - Cuenta Bancaria',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Un ejemplo pr√°ctico de una cuenta bancaria con m√©todos:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''class CuentaBancaria {
  // Propiedades
  String titular;
  double saldo;
  String numeroCuenta;
  
  // Constructor
  CuentaBancaria(this.titular, this.numeroCuenta, [this.saldo = 0.0]);
  
  // M√âTODO: Depositar dinero
  void depositar(double cantidad) {
    if (cantidad <= 0) {
      print('‚ùå Error: La cantidad debe ser mayor a 0');
      return;
    }
    
    saldo += cantidad;
    print('‚úÖ Dep√≥sito exitoso: \\\$\${cantidad.toStringAsFixed(2)}');
    print('üí∞ Saldo actual: \\\$\${saldo.toStringAsFixed(2)}');
  }
  
  // M√âTODO: Retirar dinero
  bool retirar(double cantidad) {
    if (cantidad <= 0) {
      print('‚ùå Error: La cantidad debe ser mayor a 0');
      return false;
    }
    
    if (cantidad > saldo) {
      print('‚ùå Error: Saldo insuficiente');
      print('üí∞ Saldo disponible: \\\$\${saldo.toStringAsFixed(2)}');
      return false;
    }
    
    saldo -= cantidad;
    print('‚úÖ Retiro exitoso: \\\$\${cantidad.toStringAsFixed(2)}');
    print('üí∞ Saldo restante: \\\$\${saldo.toStringAsFixed(2)}');
    return true;
  }
  
  // M√âTODO: Transferir a otra cuenta
  bool transferir(CuentaBancaria destino, double cantidad) {
    print('\\nüîÑ Iniciando transferencia...');
    print('De: \$titular ‚Üí Para: \${destino.titular}');
    
    if (retirar(cantidad)) {
      destino.depositar(cantidad);
      print('‚úÖ Transferencia completada');
      return true;
    }
    
    print('‚ùå Transferencia fallida');
    return false;
  }
  
  // M√âTODO: Consultar saldo
  void consultarSaldo() {
    print('\\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    print('Titular: \$titular');
    print('Cuenta: \$numeroCuenta');
    print('Saldo: \\\$\${saldo.toStringAsFixed(2)}');
    print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  }
  
  // GETTER: obtener saldo
  double get saldoActual => saldo;
  
  // M√âTODO: mostrar informaci√≥n
  String obtenerResumen() {
    return 'Cuenta de \$titular - Saldo: \\\$\${saldo.toStringAsFixed(2)}';
  }
}

void main() {
  print('üè¶ Sistema Bancario\\n');
  
  // Crear cuentas
  var cuenta1 = CuentaBancaria('Mar√≠a Garc√≠a', '1001', 1000.0);
  var cuenta2 = CuentaBancaria('Juan P√©rez', '1002', 500.0);
  
  // Consultar saldo inicial
  cuenta1.consultarSaldo();
  cuenta2.consultarSaldo();
  
  // Depositar
  print('\\nüì• DEP√ìSITO');
  cuenta1.depositar(500.0);
  
  // Retirar
  print('\\nüì§ RETIRO');
  cuenta2.retirar(200.0);
  
  // Transferir
  print('\\nüí∏ TRANSFERENCIA');
  cuenta1.transferir(cuenta2, 300.0);
  
  // Consultar saldos finales
  print('\\nüìä SALDOS FINALES');
  cuenta1.consultarSaldo();
  cuenta2.consultarSaldo();
  
  // Usando getter
  print('\\nüíµ Saldo de Mar√≠a: \\\$\${cuenta1.saldoActual}');
  print('üíµ Saldo de Juan: \\\$\${cuenta2.saldoActual}');
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '4. M√©todos con Par√°metros Especiales',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''class Producto {
  String nombre;
  double precio;
  int stock;
  
  Producto(this.nombre, this.precio, this.stock);
  
  // M√©todo con par√°metros posicionales opcionales
  void ajustarPrecio(double nuevoPrecio, [String? razon]) {
    precio = nuevoPrecio;
    print('Precio de \$nombre actualizado a \\\$\$precio');
    if (razon != null) {
      print('Raz√≥n: \$razon');
    }
  }
  
  // M√©todo con par√°metros nombrados
  void actualizarInfo({
    String? nuevoNombre,
    double? nuevoPrecio,
    int? nuevoStock,
  }) {
    if (nuevoNombre != null) nombre = nuevoNombre;
    if (nuevoPrecio != null) precio = nuevoPrecio;
    if (nuevoStock != null) stock = nuevoStock;
    
    print('Producto actualizado: \$nombre');
  }
  
  // M√©todo con par√°metros requeridos
  double calcularDescuento({
    required double porcentaje,
    required bool aplicarImpuesto,
  }) {
    double precioConDescuento = precio - (precio * porcentaje / 100);
    
    if (aplicarImpuesto) {
      precioConDescuento *= 1.16; // Agregar 16% de impuesto
    }
    
    return precioConDescuento;
  }
  
  // M√©todo con valor por defecto
  void mostrarInfo([bool detallado = false]) {
    print('\\nProducto: \$nombre');
    print('Precio: \\\$\$precio');
    
    if (detallado) {
      print('Stock: \$stock unidades');
      print('Valor total en inventario: \\\$\${precio * stock}');
    }
  }
}

void main() {
  var laptop = Producto('Laptop HP', 15000.0, 10);
  
  // Par√°metro opcional omitido
  laptop.ajustarPrecio(14000.0);
  
  // Par√°metro opcional proporcionado
  laptop.ajustarPrecio(13500.0, 'Promoci√≥n de temporada');
  
  // Par√°metros nombrados
  laptop.actualizarInfo(
    nuevoStock: 15,
    nuevoPrecio: 13000.0,
  );
  
  // Par√°metros requeridos
  var precioDescuento = laptop.calcularDescuento(
    porcentaje: 10,
    aplicarImpuesto: true,
  );
  print('Precio con descuento: \\\$\$precioDescuento');
  
  // Valor por defecto
  laptop.mostrarInfo();           // Modo simple
  laptop.mostrarInfo(true);       // Modo detallado
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '5. Ejemplo Avanzado - Sistema de Tienda Online',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Un sistema completo de tienda online con m√∫ltiples clases y m√©todos:',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''// Modelo de producto
class ProductoTienda {
  final String id;
  String nombre;
  double precio;
  int stockDisponible;
  String categoria;
  double calificacion;
  
  ProductoTienda({
    required this.id,
    required this.nombre,
    required this.precio,
    required this.stockDisponible,
    required this.categoria,
    this.calificacion = 0.0,
  });
  
  // M√âTODO: Verificar disponibilidad
  bool hayStock(int cantidad) => stockDisponible >= cantidad;
  
  // M√âTODO: Reducir stock
  bool reducirStock(int cantidad) {
    if (hayStock(cantidad)) {
      stockDisponible -= cantidad;
      return true;
    }
    return false;
  }
  
  // M√âTODO: Reponer stock
  void reponerStock(int cantidad) {
    stockDisponible += cantidad;
    print('üì¶ Stock de \$nombre repuesto: +\$cantidad unidades');
  }
  
  // M√âTODO: Aplicar descuento
  double obtenerPrecioConDescuento(double porcentaje) {
    return precio * (1 - porcentaje / 100);
  }
  
  // GETTER: Estado del stock
  String get estadoStock {
    if (stockDisponible == 0) return '‚ùå Agotado';
    if (stockDisponible < 5) return '‚ö†Ô∏è Stock bajo';
    return '‚úÖ Disponible';
  }
  
  @override
  String toString() {
    return '\$nombre - \\\$\$precio (\$estadoStock - \$stockDisponible disponibles)';
  }
}

// Modelo de √≠tem en carrito
class ItemCarrito {
  final ProductoTienda producto;
  int cantidad;
  
  ItemCarrito(this.producto, this.cantidad);
  
  // M√âTODO: Calcular subtotal
  double calcularSubtotal() => producto.precio * cantidad;
  
  // M√âTODO: Aumentar cantidad
  void aumentarCantidad(int incremento) {
    cantidad += incremento;
  }
  
  // M√âTODO: Reducir cantidad
  bool reducirCantidad(int decremento) {
    if (cantidad > decremento) {
      cantidad -= decremento;
      return true;
    }
    return false;
  }
  
  @override
  String toString() {
    return '\${producto.nombre} x\$cantidad = \\\$\${calcularSubtotal().toStringAsFixed(2)}';
  }
}

// Clase principal: Carrito de Compras
class CarritoCompras {
  final String clienteId;
  final List<ItemCarrito> _items = [];
  String? codigoDescuento;
  
  CarritoCompras(this.clienteId);
  
  // M√âTODO: Agregar producto al carrito
  void agregarProducto(ProductoTienda producto, int cantidad) {
    // Verificar stock
    if (!producto.hayStock(cantidad)) {
      print('‚ùå Stock insuficiente de \${producto.nombre}');
      print('   Stock disponible: \${producto.stockDisponible}');
      return;
    }
    
    // Buscar si el producto ya est√° en el carrito
    var itemExistente = _buscarItem(producto.id);
    
    if (itemExistente != null) {
      itemExistente.aumentarCantidad(cantidad);
      print('‚úÖ Cantidad actualizada de \${producto.nombre}');
    } else {
      _items.add(ItemCarrito(producto, cantidad));
      print('‚úÖ \${producto.nombre} agregado al carrito');
    }
    
    _mostrarResumen();
  }
  
  // M√âTODO PRIVADO: Buscar √≠tem en carrito
  ItemCarrito? _buscarItem(String productoId) {
    try {
      return _items.firstWhere((item) => item.producto.id == productoId);
    } catch (e) {
      return null;
    }
  }
  
  // M√âTODO: Eliminar producto del carrito
  bool eliminarProducto(String productoId) {
    var item = _buscarItem(productoId);
    if (item != null) {
      _items.remove(item);
      print('üóëÔ∏è  \${item.producto.nombre} eliminado del carrito');
      return true;
    }
    print('‚ùå Producto no encontrado en el carrito');
    return false;
  }
  
  // M√âTODO: Actualizar cantidad de producto
  void actualizarCantidad(String productoId, int nuevaCantidad) {
    var item = _buscarItem(productoId);
    
    if (item == null) {
      print('‚ùå Producto no encontrado');
      return;
    }
    
    if (nuevaCantidad <= 0) {
      eliminarProducto(productoId);
      return;
    }
    
    if (!item.producto.hayStock(nuevaCantidad)) {
      print('‚ùå Stock insuficiente');
      return;
    }
    
    item.cantidad = nuevaCantidad;
    print('‚úÖ Cantidad actualizada');
    _mostrarResumen();
  }
  
  // M√âTODO: Calcular subtotal
  double calcularSubtotal() {
    return _items.fold(0.0, (total, item) => total + item.calcularSubtotal());
  }
  
  // M√âTODO: Aplicar c√≥digo de descuento
  double aplicarDescuento(String codigo) {
    codigoDescuento = codigo;
    
    // Simulaci√≥n de c√≥digos de descuento
    Map<String, double> descuentos = {
      'VERANO2024': 15.0,
      'PRIMERACOMPRA': 20.0,
      'CLIENTE10': 10.0,
    };
    
    return descuentos[codigo] ?? 0.0;
  }
  
  // M√âTODO: Calcular impuestos
  double calcularImpuestos() {
    return calcularSubtotal() * 0.16; // 16% de IVA
  }
  
  // M√âTODO: Calcular total
  double calcularTotal() {
    double subtotal = calcularSubtotal();
    double descuento = 0.0;
    
    if (codigoDescuento != null) {
      double porcentaje = aplicarDescuento(codigoDescuento!);
      descuento = subtotal * (porcentaje / 100);
    }
    
    double impuestos = (subtotal - descuento) * 0.16;
    return subtotal - descuento + impuestos;
  }
  
  // M√âTODO: Vaciar carrito
  void vaciarCarrito() {
    _items.clear();
    codigoDescuento = null;
    print('üóëÔ∏è  Carrito vaciado');
  }
  
  // M√âTODO: Procesar compra
  bool procesarCompra() {
    if (_items.isEmpty) {
      print('‚ùå El carrito est√° vac√≠o');
      return false;
    }
    
    print('\\nüí≥ Procesando compra...');
    print('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    // Verificar y reducir stock de cada producto
    for (var item in _items) {
      if (!item.producto.reducirStock(item.cantidad)) {
        print('‚ùå Error: Stock insuficiente de \${item.producto.nombre}');
        return false;
      }
    }
    
    mostrarResumenCompra();
    vaciarCarrito();
    
    print('‚úÖ ¬°Compra procesada exitosamente!');
    print('üìß Recibir√°s un correo de confirmaci√≥n');
    
    return true;
  }
  
  // M√âTODO PRIVADO: Mostrar resumen simple
  void _mostrarResumen() {
    print('üõí Items en carrito: \${_items.length}');
    print('üí∞ Subtotal: \\\$\${calcularSubtotal().toStringAsFixed(2)}');
  }
  
  // M√âTODO: Mostrar resumen completo de compra
  void mostrarResumenCompra() {
    print('\\nüõí RESUMEN DE COMPRA');
    print('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    print('Cliente ID: \$clienteId\\n');
    
    print('Productos:');
    for (var item in _items) {
      print('  ‚Ä¢ \$item');
    }
    
    double subtotal = calcularSubtotal();
    double descuento = 0.0;
    
    if (codigoDescuento != null) {
      double porcentaje = aplicarDescuento(codigoDescuento!);
      descuento = subtotal * (porcentaje / 100);
      print('\\nSubtotal: \\\$\${subtotal.toStringAsFixed(2)}');
      print('Descuento (\$codigoDescuento -\${porcentaje.toInt()}%): -\\\$\${descuento.toStringAsFixed(2)}');
    } else {
      print('\\nSubtotal: \\\$\${subtotal.toStringAsFixed(2)}');
    }
    
    double impuestos = calcularImpuestos();
    double total = calcularTotal();
    
    print('Impuestos (16%): \\\$\${impuestos.toStringAsFixed(2)}');
    print('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    print('TOTAL: \\\$\${total.toStringAsFixed(2)}');
    print('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  }
  
  // GETTER: Cantidad de items
  int get cantidadItems => _items.length;
  
  // GETTER: Est√° vac√≠o
  bool get estaVacio => _items.isEmpty;
  
  // M√âTODO: Obtener productos del carrito
  List<ItemCarrito> obtenerItems() => List.unmodifiable(_items);
}

// Simulaci√≥n de uso del sistema
void main() {
  print('üè™ SISTEMA DE TIENDA ONLINE\\n');
  
  // Crear productos
  var laptop = ProductoTienda(
    id: 'P001',
    nombre: 'Laptop Dell XPS 15',
    precio: 25000.0,
    stockDisponible: 5,
    categoria: 'Electr√≥nica',
    calificacion: 4.5,
  );
  
  var mouse = ProductoTienda(
    id: 'P002',
    nombre: 'Mouse Logitech MX Master',
    precio: 1500.0,
    stockDisponible: 20,
    categoria: 'Accesorios',
    calificacion: 4.8,
  );
  
  var teclado = ProductoTienda(
    id: 'P003',
    nombre: 'Teclado Mec√°nico Keychron',
    precio: 2000.0,
    stockDisponible: 10,
    categoria: 'Accesorios',
    calificacion: 4.7,
  );
  
  // Mostrar productos disponibles
  print('üì¶ PRODUCTOS DISPONIBLES:');
  print(laptop);
  print(mouse);
  print(teclado);
  
  // Crear carrito
  print('\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n');
  var carrito = CarritoCompras('CLIENTE001');
  
  // Agregar productos al carrito
  print('‚ûï AGREGANDO PRODUCTOS AL CARRITO:\\n');
  carrito.agregarProducto(laptop, 1);
  print('');
  carrito.agregarProducto(mouse, 2);
  print('');
  carrito.agregarProducto(teclado, 1);
  
  // Aplicar c√≥digo de descuento
  print('\\nüéüÔ∏è  APLICANDO C√ìDIGO DE DESCUENTO:\\n');
  carrito.codigoDescuento = 'VERANO2024';
  print('C√≥digo "\${carrito.codigoDescuento}" aplicado');
  
  // Mostrar resumen antes de comprar
  print('');
  carrito.mostrarResumenCompra();
  
  // Procesar compra
  print('\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n');
  carrito.procesarCompra();
  
  // Mostrar stock actualizado
  print('\\nüìä STOCK ACTUALIZADO:');
  print(laptop);
  print(mouse);
  print(teclado);
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '6. M√©todos Especiales',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''class Empleado {
  String nombre;
  double salario;
  
  Empleado(this.nombre, this.salario);
  
  // M√âTODO toString() - Convierte objeto a String
  @override
  String toString() {
    return 'Empleado: \$nombre, Salario: \\\$\$salario';
  }
  
  // M√âTODO operator == - Comparar objetos
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Empleado && 
           other.nombre == nombre &&
           other.salario == salario;
  }
  
  // M√âTODO hashCode - Necesario al sobrescribir ==
  @override
  int get hashCode => nombre.hashCode ^ salario.hashCode;
  
  // OPERADOR PERSONALIZADO + (sumar salarios)
  Empleado operator +(Empleado otro) {
    return Empleado(
      '\$nombre + \${otro.nombre}',
      salario + otro.salario,
    );
  }
  
  // OPERADOR PERSONALIZADO > (comparar salarios)
  bool operator >(Empleado otro) {
    return salario > otro.salario;
  }
  
  // OPERADOR [] - Acceso tipo √≠ndice
  dynamic operator [](String campo) {
    switch (campo) {
      case 'nombre':
        return nombre;
      case 'salario':
        return salario;
      default:
        return null;
    }
  }
  
  // M√âTODO call() - Hace el objeto "callable"
  void call() {
    print('\$nombre gana \\\$\$salario al mes');
  }
}

void main() {
  var emp1 = Empleado('Ana', 50000);
  var emp2 = Empleado('Carlos', 60000);
  
  // toString
  print(emp1);  // Empleado: Ana, Salario: \$50000
  
  // Comparaci√≥n ==
  var emp3 = Empleado('Ana', 50000);
  print(emp1 == emp3);  // true
  
  // Operador +
  var suma = emp1 + emp2;
  print(suma);
  
  // Operador >
  print(emp2 > emp1);  // true
  
  // Operador []
  print(emp1['nombre']);   // Ana
  print(emp1['salario']);  // 50000
  
  // call()
  emp1();  // Ana gana \$50000 al mes
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '7. M√©todos Async/Await',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade900,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SelectableText(
                '''class ServicioAPI {
  // M√âTODO as√≠ncrono que retorna Future
  Future<String> obtenerDatosUsuario(int id) async {
    print('üì° Obteniendo datos del usuario \$id...');
    
    // Simular petici√≥n a API
    await Future.delayed(Duration(seconds: 2));
    
    return 'Usuario \$id: Juan P√©rez';
  }
  
  // M√âTODO as√≠ncrono con manejo de errores
  Future<Map<String, dynamic>> obtenerPerfil(int userId) async {
    try {
      print('üîç Buscando perfil...');
      await Future.delayed(Duration(seconds: 1));
      
      if (userId <= 0) {
        throw Exception('ID de usuario inv√°lido');
      }
      
      return {
        'id': userId,
        'nombre': 'Mar√≠a Garc√≠a',
        'email': 'maria@email.com',
        'edad': 28,
      };
    } catch (e) {
      print('‚ùå Error: \$e');
      rethrow;
    }
  }
  
  // M√âTODO con Stream - datos continuos
  Stream<int> contadorProgreso() async* {
    for (int i = 0; i <= 100; i += 10) {
      await Future.delayed(Duration(milliseconds: 300));
      yield i;  // Emitir valor
    }
  }
  
  // M√âTODO que consume m√∫ltiples Futures
  Future<void> procesarMultiplesUsuarios(List<int> ids) async {
    print('üìä Procesando \${ids.length} usuarios...\\n');
    
    // Procesar todos en paralelo
    var resultados = await Future.wait(
      ids.map((id) => obtenerDatosUsuario(id))
    );
    
    print('\\n‚úÖ Resultados:');
    for (var resultado in resultados) {
      print('  ‚Ä¢ \$resultado');
    }
  }
}

void main() async {
  var api = ServicioAPI();
  
  // Llamar m√©todo as√≠ncrono
  var datos = await api.obtenerDatosUsuario(1);
  print('‚úÖ \$datos\\n');
  
  // M√©todo con manejo de errores
  try {
    var perfil = await api.obtenerPerfil(123);
    print('Perfil: \$perfil\\n');
  } catch (e) {
    print('Error al obtener perfil\\n');
  }
  
  // Stream
  print('üìà Progreso:');
  await for (var progreso in api.contadorProgreso()) {
    print('  \$progreso%');
  }
  
  // M√∫ltiples usuarios
  print('\\n');
  await api.procesarMultiplesUsuarios([1, 2, 3]);
}''',
                style: TextStyle(
                  fontFamily: 'monospace',
                  color: Colors.green.shade300,
                  fontSize: 14,
                ),
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '8. Mejores Pr√°cticas',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‚úÖ Buenas Pr√°cticas:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.green.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Usa nombres descriptivos para m√©todos (verbos)\n'
                    '‚Ä¢ Mant√©n m√©todos cortos y con una sola responsabilidad\n'
                    '‚Ä¢ Usa getters/setters en lugar de acceso directo\n'
                    '‚Ä¢ M√©todos privados comienzan con _ (guion bajo)\n'
                    '‚Ä¢ Documenta m√©todos complejos con comentarios\n'
                    '‚Ä¢ Prefiere m√©todos de instancia sobre est√°ticos\n'
                    '‚Ä¢ Usa async/await para operaciones as√≠ncronas\n'
                    '‚Ä¢ Valida par√°metros al inicio del m√©todo',
                    style: TextStyle(
                      color: Colors.green.shade900,
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '‚ùå Evita:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.red.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‚Ä¢ M√©todos demasiado largos (m√°s de 50 l√≠neas)\n'
                    '‚Ä¢ Modificar par√°metros directamente\n'
                    '‚Ä¢ M√©todos con demasiados par√°metros (m√°s de 5)\n'
                    '‚Ä¢ L√≥gica compleja sin dividir en m√©todos privados\n'
                    '‚Ä¢ No manejar errores en m√©todos async\n'
                    '‚Ä¢ Efectos secundarios inesperados\n'
                    '‚Ä¢ No validar entrada de datos\n'
                    '‚Ä¢ Usar this cuando no es necesario',
                    style: TextStyle(
                      color: Colors.red.shade900,
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 32),
            Text(
              '9. Resumen',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.purple.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.purple.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üìã Puntos Clave:',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.purple.shade900,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    '1Ô∏è‚É£ M√©todos son funciones que pertenecen a una clase\n\n'
                    '2Ô∏è‚É£ Tienen acceso al estado del objeto (this)\n\n'
                    '3Ô∏è‚É£ Definen el comportamiento de los objetos\n\n'
                    '4Ô∏è‚É£ Pueden ser de instancia, est√°ticos o privados\n\n'
                    '5Ô∏è‚É£ Getters y setters controlan el acceso a propiedades\n\n'
                    '6Ô∏è‚É£ Pueden ser s√≠ncronos o as√≠ncronos (async/await)\n\n'
                    '7Ô∏è‚É£ La diferencia principal con funciones es la asociaci√≥n a una clase\n\n'
                    '8Ô∏è‚É£ Son fundamentales para la POO y encapsulaci√≥n',
                    style: TextStyle(
                      color: Colors.purple.shade900,
                      height: 1.8,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }
}

